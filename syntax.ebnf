digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" 
       | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" 
       | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m"
       | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"

identifier = (letter | "_"), (letter | digit | "_")*
integer = digit+
string = '"' ? ANY ? '"'
newline = "\n"

list(X) = newline*, ( X, newline*, (",", newline*, X, newline*)* )?, ","?, newline*

statement = expression
          | let_statement
          | const_statement

expression = integer
           | string
           | identifier
           | splice
           | "(", newline*, expression, newline*, ")"
           | block
           | expression, "(", list(expression), ")"
           | fun_expression
           | funtype_expression
           | constructor
           | "const", block
           | "quote", block

block = "{", statements, "}"
statements = newline*, (statement, newline)*, statement, newline?

annotation = ":", expression
splice = "$", identifier

let_statement = "let",     (identifier | splice), annotation?, "=", expression
const_statement = "const", (identifier | splice), annotation?, "=", expression

fun_expression = "fun", "(",
           list((identifier | splice), annotation), ")", 
           "->", expression, block_expression

funtype_expression = "Fun", "(", list(expression), ")", "->", expression

constructor = ".", (identifier | splice)?, ("(", list(expression), ")")?

program = statements
